name: Release

on:
  push:
    tags:
      - 'v*.*.*'  # Trigger the workflow on version tags like v1.0.0

jobs:
  build-linux:
    name: Build on Linux
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Build the application
        run: cargo build --release

      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: lul-linux
          path: target/release/lul

  build-windows:
    name: Build on Windows
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Build the application
        run: cargo build --release

      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: lul-windows
          path: target/release/lul.exe

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-linux, build-windows]

    steps:
      - name: Download Linux build artifact
        uses: actions/download-artifact@v3
        with:
          name: lul-linux

      - name: Download Windows build artifact
        uses: actions/download-artifact@v3
        with:
          name: lul-windows

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Linux Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: target/release/lul
          asset_name: lul-linux
          asset_content_type: application/octet-stream

      - name: Upload Windows Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: target/release/lul.exe
          asset_name: lul-windows.exe
          asset_content_type: application/octet-stream

